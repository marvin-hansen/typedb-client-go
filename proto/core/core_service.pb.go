// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: proto/core/core_service.proto

package core

import (
	context "context"
	common "github.com/marvin-hansen/go-typedb/proto/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_proto_core_core_service_proto protoreflect.FileDescriptor

var file_proto_core_core_service_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0f, 0x74, 0x79, 0x70, 0x65, 0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x1a, 0x1e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x9a, 0x07, 0x0a,
	0x06, 0x54, 0x79, 0x70, 0x65, 0x44, 0x42, 0x12, 0x7a, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x31, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x43, 0x6f, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x71,
	0x1a, 0x31, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x2e,
	0x52, 0x65, 0x73, 0x12, 0x74, 0x0a, 0x10, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73,
	0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x64, 0x62,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x1a, 0x2f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x64,
	0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x12, 0x6b, 0x0a, 0x0d, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x12, 0x2c, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x6f, 0x72,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x41, 0x6c, 0x6c, 0x2e, 0x52, 0x65, 0x71, 0x1a, 0x2c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x64,
	0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x41,
	0x6c, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x12, 0x65, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x28, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x6f, 0x72, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x12, 0x65, 0x0a,
	0x0f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x12, 0x28, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x6f, 0x72,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x2e, 0x52, 0x65, 0x73, 0x12, 0x54, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x6f, 0x70, 0x65, 0x6e, 0x12, 0x21, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x64, 0x62, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4f,
	0x70, 0x65, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x64, 0x62,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x0d, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x22, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x1a,
	0x22, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x2e,
	0x52, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x75, 0x6c, 0x73, 0x65, 0x12, 0x22, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x64, 0x62, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x50,
	0x75, 0x6c, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x64,
	0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x50, 0x75, 0x6c, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x12, 0x5b, 0x0a, 0x0b,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x1a, 0x23, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x28, 0x01, 0x30, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var file_proto_core_core_service_proto_goTypes = []interface{}{
	(*CoreDatabaseManager_Contains_Req)(nil), // 0: typedb.protocol.CoreDatabaseManager.Contains.Req
	(*CoreDatabaseManager_Create_Req)(nil),   // 1: typedb.protocol.CoreDatabaseManager.Create.Req
	(*CoreDatabaseManager_All_Req)(nil),      // 2: typedb.protocol.CoreDatabaseManager.All.Req
	(*CoreDatabase_Schema_Req)(nil),          // 3: typedb.protocol.CoreDatabase.Schema.Req
	(*CoreDatabase_Delete_Req)(nil),          // 4: typedb.protocol.CoreDatabase.Delete.Req
	(*common.Session_Open_Req)(nil),          // 5: typedb.protocol.Session.Open.Req
	(*common.Session_Close_Req)(nil),         // 6: typedb.protocol.Session.Close.Req
	(*common.Session_Pulse_Req)(nil),         // 7: typedb.protocol.Session.Pulse.Req
	(*common.Transaction_Client)(nil),        // 8: typedb.protocol.Transaction.Client
	(*CoreDatabaseManager_Contains_Res)(nil), // 9: typedb.protocol.CoreDatabaseManager.Contains.Res
	(*CoreDatabaseManager_Create_Res)(nil),   // 10: typedb.protocol.CoreDatabaseManager.Create.Res
	(*CoreDatabaseManager_All_Res)(nil),      // 11: typedb.protocol.CoreDatabaseManager.All.Res
	(*CoreDatabase_Schema_Res)(nil),          // 12: typedb.protocol.CoreDatabase.Schema.Res
	(*CoreDatabase_Delete_Res)(nil),          // 13: typedb.protocol.CoreDatabase.Delete.Res
	(*common.Session_Open_Res)(nil),          // 14: typedb.protocol.Session.Open.Res
	(*common.Session_Close_Res)(nil),         // 15: typedb.protocol.Session.Close.Res
	(*common.Session_Pulse_Res)(nil),         // 16: typedb.protocol.Session.Pulse.Res
	(*common.Transaction_Server)(nil),        // 17: typedb.protocol.Transaction.Server
}
var file_proto_core_core_service_proto_depIdxs = []int32{
	0,  // 0: typedb.protocol.TypeDB.databases_contains:input_type -> typedb.protocol.CoreDatabaseManager.Contains.Req
	1,  // 1: typedb.protocol.TypeDB.databases_create:input_type -> typedb.protocol.CoreDatabaseManager.Create.Req
	2,  // 2: typedb.protocol.TypeDB.databases_all:input_type -> typedb.protocol.CoreDatabaseManager.All.Req
	3,  // 3: typedb.protocol.TypeDB.database_schema:input_type -> typedb.protocol.CoreDatabase.Schema.Req
	4,  // 4: typedb.protocol.TypeDB.database_delete:input_type -> typedb.protocol.CoreDatabase.Delete.Req
	5,  // 5: typedb.protocol.TypeDB.session_open:input_type -> typedb.protocol.Session.Open.Req
	6,  // 6: typedb.protocol.TypeDB.session_close:input_type -> typedb.protocol.Session.Close.Req
	7,  // 7: typedb.protocol.TypeDB.session_pulse:input_type -> typedb.protocol.Session.Pulse.Req
	8,  // 8: typedb.protocol.TypeDB.transaction:input_type -> typedb.protocol.Transaction.Client
	9,  // 9: typedb.protocol.TypeDB.databases_contains:output_type -> typedb.protocol.CoreDatabaseManager.Contains.Res
	10, // 10: typedb.protocol.TypeDB.databases_create:output_type -> typedb.protocol.CoreDatabaseManager.Create.Res
	11, // 11: typedb.protocol.TypeDB.databases_all:output_type -> typedb.protocol.CoreDatabaseManager.All.Res
	12, // 12: typedb.protocol.TypeDB.database_schema:output_type -> typedb.protocol.CoreDatabase.Schema.Res
	13, // 13: typedb.protocol.TypeDB.database_delete:output_type -> typedb.protocol.CoreDatabase.Delete.Res
	14, // 14: typedb.protocol.TypeDB.session_open:output_type -> typedb.protocol.Session.Open.Res
	15, // 15: typedb.protocol.TypeDB.session_close:output_type -> typedb.protocol.Session.Close.Res
	16, // 16: typedb.protocol.TypeDB.session_pulse:output_type -> typedb.protocol.Session.Pulse.Res
	17, // 17: typedb.protocol.TypeDB.transaction:output_type -> typedb.protocol.Transaction.Server
	9,  // [9:18] is the sub-list for method output_type
	0,  // [0:9] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_proto_core_core_service_proto_init() }
func file_proto_core_core_service_proto_init() {
	if File_proto_core_core_service_proto != nil {
		return
	}
	file_proto_core_core_database_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_core_core_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_core_core_service_proto_goTypes,
		DependencyIndexes: file_proto_core_core_service_proto_depIdxs,
	}.Build()
	File_proto_core_core_service_proto = out.File
	file_proto_core_core_service_proto_rawDesc = nil
	file_proto_core_core_service_proto_goTypes = nil
	file_proto_core_core_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TypeDBClient is the client API for TypeDB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TypeDBClient interface {
	DatabasesContains(ctx context.Context, in *CoreDatabaseManager_Contains_Req, opts ...grpc.CallOption) (*CoreDatabaseManager_Contains_Res, error)
	DatabasesCreate(ctx context.Context, in *CoreDatabaseManager_Create_Req, opts ...grpc.CallOption) (*CoreDatabaseManager_Create_Res, error)
	DatabasesAll(ctx context.Context, in *CoreDatabaseManager_All_Req, opts ...grpc.CallOption) (*CoreDatabaseManager_All_Res, error)
	DatabaseSchema(ctx context.Context, in *CoreDatabase_Schema_Req, opts ...grpc.CallOption) (*CoreDatabase_Schema_Res, error)
	DatabaseDelete(ctx context.Context, in *CoreDatabase_Delete_Req, opts ...grpc.CallOption) (*CoreDatabase_Delete_Res, error)
	SessionOpen(ctx context.Context, in *common.Session_Open_Req, opts ...grpc.CallOption) (*common.Session_Open_Res, error)
	SessionClose(ctx context.Context, in *common.Session_Close_Req, opts ...grpc.CallOption) (*common.Session_Close_Res, error)
	SessionPulse(ctx context.Context, in *common.Session_Pulse_Req, opts ...grpc.CallOption) (*common.Session_Pulse_Res, error)
	Transaction(ctx context.Context, opts ...grpc.CallOption) (TypeDB_TransactionClient, error)
}

type typeDBClient struct {
	cc grpc.ClientConnInterface
}

func NewTypeDBClient(cc grpc.ClientConnInterface) TypeDBClient {
	return &typeDBClient{cc}
}

func (c *typeDBClient) DatabasesContains(ctx context.Context, in *CoreDatabaseManager_Contains_Req, opts ...grpc.CallOption) (*CoreDatabaseManager_Contains_Res, error) {
	out := new(CoreDatabaseManager_Contains_Res)
	err := c.cc.Invoke(ctx, "/typedb.protocol.TypeDB/databases_contains", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typeDBClient) DatabasesCreate(ctx context.Context, in *CoreDatabaseManager_Create_Req, opts ...grpc.CallOption) (*CoreDatabaseManager_Create_Res, error) {
	out := new(CoreDatabaseManager_Create_Res)
	err := c.cc.Invoke(ctx, "/typedb.protocol.TypeDB/databases_create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typeDBClient) DatabasesAll(ctx context.Context, in *CoreDatabaseManager_All_Req, opts ...grpc.CallOption) (*CoreDatabaseManager_All_Res, error) {
	out := new(CoreDatabaseManager_All_Res)
	err := c.cc.Invoke(ctx, "/typedb.protocol.TypeDB/databases_all", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typeDBClient) DatabaseSchema(ctx context.Context, in *CoreDatabase_Schema_Req, opts ...grpc.CallOption) (*CoreDatabase_Schema_Res, error) {
	out := new(CoreDatabase_Schema_Res)
	err := c.cc.Invoke(ctx, "/typedb.protocol.TypeDB/database_schema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typeDBClient) DatabaseDelete(ctx context.Context, in *CoreDatabase_Delete_Req, opts ...grpc.CallOption) (*CoreDatabase_Delete_Res, error) {
	out := new(CoreDatabase_Delete_Res)
	err := c.cc.Invoke(ctx, "/typedb.protocol.TypeDB/database_delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typeDBClient) SessionOpen(ctx context.Context, in *common.Session_Open_Req, opts ...grpc.CallOption) (*common.Session_Open_Res, error) {
	out := new(common.Session_Open_Res)
	err := c.cc.Invoke(ctx, "/typedb.protocol.TypeDB/session_open", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typeDBClient) SessionClose(ctx context.Context, in *common.Session_Close_Req, opts ...grpc.CallOption) (*common.Session_Close_Res, error) {
	out := new(common.Session_Close_Res)
	err := c.cc.Invoke(ctx, "/typedb.protocol.TypeDB/session_close", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typeDBClient) SessionPulse(ctx context.Context, in *common.Session_Pulse_Req, opts ...grpc.CallOption) (*common.Session_Pulse_Res, error) {
	out := new(common.Session_Pulse_Res)
	err := c.cc.Invoke(ctx, "/typedb.protocol.TypeDB/session_pulse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typeDBClient) Transaction(ctx context.Context, opts ...grpc.CallOption) (TypeDB_TransactionClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TypeDB_serviceDesc.Streams[0], "/typedb.protocol.TypeDB/transaction", opts...)
	if err != nil {
		return nil, err
	}
	x := &typeDBTransactionClient{stream}
	return x, nil
}

type TypeDB_TransactionClient interface {
	Send(*common.Transaction_Client) error
	Recv() (*common.Transaction_Server, error)
	grpc.ClientStream
}

type typeDBTransactionClient struct {
	grpc.ClientStream
}

func (x *typeDBTransactionClient) Send(m *common.Transaction_Client) error {
	return x.ClientStream.SendMsg(m)
}

func (x *typeDBTransactionClient) Recv() (*common.Transaction_Server, error) {
	m := new(common.Transaction_Server)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TypeDBServer is the server API for TypeDB service.
type TypeDBServer interface {
	DatabasesContains(context.Context, *CoreDatabaseManager_Contains_Req) (*CoreDatabaseManager_Contains_Res, error)
	DatabasesCreate(context.Context, *CoreDatabaseManager_Create_Req) (*CoreDatabaseManager_Create_Res, error)
	DatabasesAll(context.Context, *CoreDatabaseManager_All_Req) (*CoreDatabaseManager_All_Res, error)
	DatabaseSchema(context.Context, *CoreDatabase_Schema_Req) (*CoreDatabase_Schema_Res, error)
	DatabaseDelete(context.Context, *CoreDatabase_Delete_Req) (*CoreDatabase_Delete_Res, error)
	SessionOpen(context.Context, *common.Session_Open_Req) (*common.Session_Open_Res, error)
	SessionClose(context.Context, *common.Session_Close_Req) (*common.Session_Close_Res, error)
	SessionPulse(context.Context, *common.Session_Pulse_Req) (*common.Session_Pulse_Res, error)
	Transaction(TypeDB_TransactionServer) error
}

// UnimplementedTypeDBServer can be embedded to have forward compatible implementations.
type UnimplementedTypeDBServer struct {
}

func (*UnimplementedTypeDBServer) DatabasesContains(context.Context, *CoreDatabaseManager_Contains_Req) (*CoreDatabaseManager_Contains_Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DatabasesContains not implemented")
}
func (*UnimplementedTypeDBServer) DatabasesCreate(context.Context, *CoreDatabaseManager_Create_Req) (*CoreDatabaseManager_Create_Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DatabasesCreate not implemented")
}
func (*UnimplementedTypeDBServer) DatabasesAll(context.Context, *CoreDatabaseManager_All_Req) (*CoreDatabaseManager_All_Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DatabasesAll not implemented")
}
func (*UnimplementedTypeDBServer) DatabaseSchema(context.Context, *CoreDatabase_Schema_Req) (*CoreDatabase_Schema_Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DatabaseSchema not implemented")
}
func (*UnimplementedTypeDBServer) DatabaseDelete(context.Context, *CoreDatabase_Delete_Req) (*CoreDatabase_Delete_Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DatabaseDelete not implemented")
}
func (*UnimplementedTypeDBServer) SessionOpen(context.Context, *common.Session_Open_Req) (*common.Session_Open_Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionOpen not implemented")
}
func (*UnimplementedTypeDBServer) SessionClose(context.Context, *common.Session_Close_Req) (*common.Session_Close_Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionClose not implemented")
}
func (*UnimplementedTypeDBServer) SessionPulse(context.Context, *common.Session_Pulse_Req) (*common.Session_Pulse_Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionPulse not implemented")
}
func (*UnimplementedTypeDBServer) Transaction(TypeDB_TransactionServer) error {
	return status.Errorf(codes.Unimplemented, "method Transaction not implemented")
}

func RegisterTypeDBServer(s *grpc.Server, srv TypeDBServer) {
	s.RegisterService(&_TypeDB_serviceDesc, srv)
}

func _TypeDB_DatabasesContains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoreDatabaseManager_Contains_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypeDBServer).DatabasesContains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/typedb.protocol.TypeDB/DatabasesContains",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypeDBServer).DatabasesContains(ctx, req.(*CoreDatabaseManager_Contains_Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _TypeDB_DatabasesCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoreDatabaseManager_Create_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypeDBServer).DatabasesCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/typedb.protocol.TypeDB/DatabasesCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypeDBServer).DatabasesCreate(ctx, req.(*CoreDatabaseManager_Create_Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _TypeDB_DatabasesAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoreDatabaseManager_All_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypeDBServer).DatabasesAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/typedb.protocol.TypeDB/DatabasesAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypeDBServer).DatabasesAll(ctx, req.(*CoreDatabaseManager_All_Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _TypeDB_DatabaseSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoreDatabase_Schema_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypeDBServer).DatabaseSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/typedb.protocol.TypeDB/DatabaseSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypeDBServer).DatabaseSchema(ctx, req.(*CoreDatabase_Schema_Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _TypeDB_DatabaseDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoreDatabase_Delete_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypeDBServer).DatabaseDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/typedb.protocol.TypeDB/DatabaseDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypeDBServer).DatabaseDelete(ctx, req.(*CoreDatabase_Delete_Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _TypeDB_SessionOpen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Session_Open_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypeDBServer).SessionOpen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/typedb.protocol.TypeDB/SessionOpen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypeDBServer).SessionOpen(ctx, req.(*common.Session_Open_Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _TypeDB_SessionClose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Session_Close_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypeDBServer).SessionClose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/typedb.protocol.TypeDB/SessionClose",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypeDBServer).SessionClose(ctx, req.(*common.Session_Close_Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _TypeDB_SessionPulse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Session_Pulse_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypeDBServer).SessionPulse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/typedb.protocol.TypeDB/SessionPulse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypeDBServer).SessionPulse(ctx, req.(*common.Session_Pulse_Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _TypeDB_Transaction_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TypeDBServer).Transaction(&typeDBTransactionServer{stream})
}

type TypeDB_TransactionServer interface {
	Send(*common.Transaction_Server) error
	Recv() (*common.Transaction_Client, error)
	grpc.ServerStream
}

type typeDBTransactionServer struct {
	grpc.ServerStream
}

func (x *typeDBTransactionServer) Send(m *common.Transaction_Server) error {
	return x.ServerStream.SendMsg(m)
}

func (x *typeDBTransactionServer) Recv() (*common.Transaction_Client, error) {
	m := new(common.Transaction_Client)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _TypeDB_serviceDesc = grpc.ServiceDesc{
	ServiceName: "typedb.protocol.TypeDB",
	HandlerType: (*TypeDBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "databases_contains",
			Handler:    _TypeDB_DatabasesContains_Handler,
		},
		{
			MethodName: "databases_create",
			Handler:    _TypeDB_DatabasesCreate_Handler,
		},
		{
			MethodName: "databases_all",
			Handler:    _TypeDB_DatabasesAll_Handler,
		},
		{
			MethodName: "database_schema",
			Handler:    _TypeDB_DatabaseSchema_Handler,
		},
		{
			MethodName: "database_delete",
			Handler:    _TypeDB_DatabaseDelete_Handler,
		},
		{
			MethodName: "session_open",
			Handler:    _TypeDB_SessionOpen_Handler,
		},
		{
			MethodName: "session_close",
			Handler:    _TypeDB_SessionClose_Handler,
		},
		{
			MethodName: "session_pulse",
			Handler:    _TypeDB_SessionPulse_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "transaction",
			Handler:       _TypeDB_Transaction_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/core/core_service.proto",
}
