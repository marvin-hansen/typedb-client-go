// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: proto/cluster/cluster_service.proto

package cluster

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_proto_cluster_cluster_service_proto protoreflect.FileDescriptor

var file_proto_cluster_cluster_service_proto_rawDesc = []byte{
	0x0a, 0x23, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x64, 0x62, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x1a, 0x22, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x32, 0xc7, 0x07, 0x0a, 0x0d, 0x54, 0x79, 0x70, 0x65, 0x44, 0x42, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x5d, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x5f,
	0x61, 0x6c, 0x6c, 0x12, 0x26, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x41, 0x6c, 0x6c, 0x2e, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x41, 0x6c, 0x6c, 0x2e,
	0x52, 0x65, 0x73, 0x12, 0x74, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x30, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x64, 0x62, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55,
	0x73, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x1a, 0x30, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x64, 0x62,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x12, 0x6e, 0x0a, 0x0c, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x1a, 0x2e, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x12, 0x65, 0x0a, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x12, 0x2b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x64, 0x62, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x41, 0x6c, 0x6c, 0x2e,
	0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x41, 0x6c, 0x6c, 0x2e, 0x52, 0x65, 0x73,
	0x12, 0x65, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x29, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x2e,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x2e, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x12, 0x5c, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x26, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x64, 0x62, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55,
	0x73, 0x65, 0x72, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x2e, 0x52, 0x65, 0x73, 0x12, 0x5f, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x12, 0x27, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x64, 0x62, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x12, 0x71, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x12, 0x2f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x64, 0x62,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x47, 0x65, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x1a, 0x2f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x64,
	0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x47, 0x65, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x12, 0x71, 0x0a, 0x0d, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x12, 0x2f, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x41, 0x6c, 0x6c, 0x2e, 0x52, 0x65, 0x71, 0x1a, 0x2f, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x41, 0x6c, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var file_proto_cluster_cluster_service_proto_goTypes = []interface{}{
	(*ServerManager_All_Req)(nil),           // 0: typedb.protocol.ServerManager.All.Req
	(*ClusterUserManager_Contains_Req)(nil), // 1: typedb.protocol.ClusterUserManager.Contains.Req
	(*ClusterUserManager_Create_Req)(nil),   // 2: typedb.protocol.ClusterUserManager.Create.Req
	(*ClusterUserManager_All_Req)(nil),      // 3: typedb.protocol.ClusterUserManager.All.Req
	(*ClusterUser_Password_Req)(nil),        // 4: typedb.protocol.ClusterUser.Password.Req
	(*ClusterUser_Token_Req)(nil),           // 5: typedb.protocol.ClusterUser.Token.Req
	(*ClusterUser_Delete_Req)(nil),          // 6: typedb.protocol.ClusterUser.Delete.Req
	(*ClusterDatabaseManager_Get_Req)(nil),  // 7: typedb.protocol.ClusterDatabaseManager.Get.Req
	(*ClusterDatabaseManager_All_Req)(nil),  // 8: typedb.protocol.ClusterDatabaseManager.All.Req
	(*ServerManager_All_Res)(nil),           // 9: typedb.protocol.ServerManager.All.Res
	(*ClusterUserManager_Contains_Res)(nil), // 10: typedb.protocol.ClusterUserManager.Contains.Res
	(*ClusterUserManager_Create_Res)(nil),   // 11: typedb.protocol.ClusterUserManager.Create.Res
	(*ClusterUserManager_All_Res)(nil),      // 12: typedb.protocol.ClusterUserManager.All.Res
	(*ClusterUser_Password_Res)(nil),        // 13: typedb.protocol.ClusterUser.Password.Res
	(*ClusterUser_Token_Res)(nil),           // 14: typedb.protocol.ClusterUser.Token.Res
	(*ClusterUser_Delete_Res)(nil),          // 15: typedb.protocol.ClusterUser.Delete.Res
	(*ClusterDatabaseManager_Get_Res)(nil),  // 16: typedb.protocol.ClusterDatabaseManager.Get.Res
	(*ClusterDatabaseManager_All_Res)(nil),  // 17: typedb.protocol.ClusterDatabaseManager.All.Res
}
var file_proto_cluster_cluster_service_proto_depIdxs = []int32{
	0,  // 0: typedb.protocol.TypeDBCluster.servers_all:input_type -> typedb.protocol.ServerManager.All.Req
	1,  // 1: typedb.protocol.TypeDBCluster.users_contains:input_type -> typedb.protocol.ClusterUserManager.Contains.Req
	2,  // 2: typedb.protocol.TypeDBCluster.users_create:input_type -> typedb.protocol.ClusterUserManager.Create.Req
	3,  // 3: typedb.protocol.TypeDBCluster.users_all:input_type -> typedb.protocol.ClusterUserManager.All.Req
	4,  // 4: typedb.protocol.TypeDBCluster.user_password:input_type -> typedb.protocol.ClusterUser.Password.Req
	5,  // 5: typedb.protocol.TypeDBCluster.user_token:input_type -> typedb.protocol.ClusterUser.Token.Req
	6,  // 6: typedb.protocol.TypeDBCluster.user_delete:input_type -> typedb.protocol.ClusterUser.Delete.Req
	7,  // 7: typedb.protocol.TypeDBCluster.databases_get:input_type -> typedb.protocol.ClusterDatabaseManager.Get.Req
	8,  // 8: typedb.protocol.TypeDBCluster.databases_all:input_type -> typedb.protocol.ClusterDatabaseManager.All.Req
	9,  // 9: typedb.protocol.TypeDBCluster.servers_all:output_type -> typedb.protocol.ServerManager.All.Res
	10, // 10: typedb.protocol.TypeDBCluster.users_contains:output_type -> typedb.protocol.ClusterUserManager.Contains.Res
	11, // 11: typedb.protocol.TypeDBCluster.users_create:output_type -> typedb.protocol.ClusterUserManager.Create.Res
	12, // 12: typedb.protocol.TypeDBCluster.users_all:output_type -> typedb.protocol.ClusterUserManager.All.Res
	13, // 13: typedb.protocol.TypeDBCluster.user_password:output_type -> typedb.protocol.ClusterUser.Password.Res
	14, // 14: typedb.protocol.TypeDBCluster.user_token:output_type -> typedb.protocol.ClusterUser.Token.Res
	15, // 15: typedb.protocol.TypeDBCluster.user_delete:output_type -> typedb.protocol.ClusterUser.Delete.Res
	16, // 16: typedb.protocol.TypeDBCluster.databases_get:output_type -> typedb.protocol.ClusterDatabaseManager.Get.Res
	17, // 17: typedb.protocol.TypeDBCluster.databases_all:output_type -> typedb.protocol.ClusterDatabaseManager.All.Res
	9,  // [9:18] is the sub-list for method output_type
	0,  // [0:9] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_proto_cluster_cluster_service_proto_init() }
func file_proto_cluster_cluster_service_proto_init() {
	if File_proto_cluster_cluster_service_proto != nil {
		return
	}
	file_proto_cluster_cluster_server_proto_init()
	file_proto_cluster_cluster_user_proto_init()
	file_proto_cluster_cluster_database_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_cluster_cluster_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_cluster_cluster_service_proto_goTypes,
		DependencyIndexes: file_proto_cluster_cluster_service_proto_depIdxs,
	}.Build()
	File_proto_cluster_cluster_service_proto = out.File
	file_proto_cluster_cluster_service_proto_rawDesc = nil
	file_proto_cluster_cluster_service_proto_goTypes = nil
	file_proto_cluster_cluster_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TypeDBClusterClient is the client API for TypeDBCluster service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TypeDBClusterClient interface {
	ServersAll(ctx context.Context, in *ServerManager_All_Req, opts ...grpc.CallOption) (*ServerManager_All_Res, error)
	UsersContains(ctx context.Context, in *ClusterUserManager_Contains_Req, opts ...grpc.CallOption) (*ClusterUserManager_Contains_Res, error)
	UsersCreate(ctx context.Context, in *ClusterUserManager_Create_Req, opts ...grpc.CallOption) (*ClusterUserManager_Create_Res, error)
	UsersAll(ctx context.Context, in *ClusterUserManager_All_Req, opts ...grpc.CallOption) (*ClusterUserManager_All_Res, error)
	UserPassword(ctx context.Context, in *ClusterUser_Password_Req, opts ...grpc.CallOption) (*ClusterUser_Password_Res, error)
	UserToken(ctx context.Context, in *ClusterUser_Token_Req, opts ...grpc.CallOption) (*ClusterUser_Token_Res, error)
	UserDelete(ctx context.Context, in *ClusterUser_Delete_Req, opts ...grpc.CallOption) (*ClusterUser_Delete_Res, error)
	DatabasesGet(ctx context.Context, in *ClusterDatabaseManager_Get_Req, opts ...grpc.CallOption) (*ClusterDatabaseManager_Get_Res, error)
	DatabasesAll(ctx context.Context, in *ClusterDatabaseManager_All_Req, opts ...grpc.CallOption) (*ClusterDatabaseManager_All_Res, error)
}

type typeDBClusterClient struct {
	cc grpc.ClientConnInterface
}

func NewTypeDBClusterClient(cc grpc.ClientConnInterface) TypeDBClusterClient {
	return &typeDBClusterClient{cc}
}

func (c *typeDBClusterClient) ServersAll(ctx context.Context, in *ServerManager_All_Req, opts ...grpc.CallOption) (*ServerManager_All_Res, error) {
	out := new(ServerManager_All_Res)
	err := c.cc.Invoke(ctx, "/typedb.protocol.TypeDBCluster/servers_all", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typeDBClusterClient) UsersContains(ctx context.Context, in *ClusterUserManager_Contains_Req, opts ...grpc.CallOption) (*ClusterUserManager_Contains_Res, error) {
	out := new(ClusterUserManager_Contains_Res)
	err := c.cc.Invoke(ctx, "/typedb.protocol.TypeDBCluster/users_contains", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typeDBClusterClient) UsersCreate(ctx context.Context, in *ClusterUserManager_Create_Req, opts ...grpc.CallOption) (*ClusterUserManager_Create_Res, error) {
	out := new(ClusterUserManager_Create_Res)
	err := c.cc.Invoke(ctx, "/typedb.protocol.TypeDBCluster/users_create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typeDBClusterClient) UsersAll(ctx context.Context, in *ClusterUserManager_All_Req, opts ...grpc.CallOption) (*ClusterUserManager_All_Res, error) {
	out := new(ClusterUserManager_All_Res)
	err := c.cc.Invoke(ctx, "/typedb.protocol.TypeDBCluster/users_all", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typeDBClusterClient) UserPassword(ctx context.Context, in *ClusterUser_Password_Req, opts ...grpc.CallOption) (*ClusterUser_Password_Res, error) {
	out := new(ClusterUser_Password_Res)
	err := c.cc.Invoke(ctx, "/typedb.protocol.TypeDBCluster/user_password", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typeDBClusterClient) UserToken(ctx context.Context, in *ClusterUser_Token_Req, opts ...grpc.CallOption) (*ClusterUser_Token_Res, error) {
	out := new(ClusterUser_Token_Res)
	err := c.cc.Invoke(ctx, "/typedb.protocol.TypeDBCluster/user_token", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typeDBClusterClient) UserDelete(ctx context.Context, in *ClusterUser_Delete_Req, opts ...grpc.CallOption) (*ClusterUser_Delete_Res, error) {
	out := new(ClusterUser_Delete_Res)
	err := c.cc.Invoke(ctx, "/typedb.protocol.TypeDBCluster/user_delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typeDBClusterClient) DatabasesGet(ctx context.Context, in *ClusterDatabaseManager_Get_Req, opts ...grpc.CallOption) (*ClusterDatabaseManager_Get_Res, error) {
	out := new(ClusterDatabaseManager_Get_Res)
	err := c.cc.Invoke(ctx, "/typedb.protocol.TypeDBCluster/databases_get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typeDBClusterClient) DatabasesAll(ctx context.Context, in *ClusterDatabaseManager_All_Req, opts ...grpc.CallOption) (*ClusterDatabaseManager_All_Res, error) {
	out := new(ClusterDatabaseManager_All_Res)
	err := c.cc.Invoke(ctx, "/typedb.protocol.TypeDBCluster/databases_all", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TypeDBClusterServer is the server API for TypeDBCluster service.
type TypeDBClusterServer interface {
	ServersAll(context.Context, *ServerManager_All_Req) (*ServerManager_All_Res, error)
	UsersContains(context.Context, *ClusterUserManager_Contains_Req) (*ClusterUserManager_Contains_Res, error)
	UsersCreate(context.Context, *ClusterUserManager_Create_Req) (*ClusterUserManager_Create_Res, error)
	UsersAll(context.Context, *ClusterUserManager_All_Req) (*ClusterUserManager_All_Res, error)
	UserPassword(context.Context, *ClusterUser_Password_Req) (*ClusterUser_Password_Res, error)
	UserToken(context.Context, *ClusterUser_Token_Req) (*ClusterUser_Token_Res, error)
	UserDelete(context.Context, *ClusterUser_Delete_Req) (*ClusterUser_Delete_Res, error)
	DatabasesGet(context.Context, *ClusterDatabaseManager_Get_Req) (*ClusterDatabaseManager_Get_Res, error)
	DatabasesAll(context.Context, *ClusterDatabaseManager_All_Req) (*ClusterDatabaseManager_All_Res, error)
}

// UnimplementedTypeDBClusterServer can be embedded to have forward compatible implementations.
type UnimplementedTypeDBClusterServer struct {
}

func (*UnimplementedTypeDBClusterServer) ServersAll(context.Context, *ServerManager_All_Req) (*ServerManager_All_Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServersAll not implemented")
}
func (*UnimplementedTypeDBClusterServer) UsersContains(context.Context, *ClusterUserManager_Contains_Req) (*ClusterUserManager_Contains_Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UsersContains not implemented")
}
func (*UnimplementedTypeDBClusterServer) UsersCreate(context.Context, *ClusterUserManager_Create_Req) (*ClusterUserManager_Create_Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UsersCreate not implemented")
}
func (*UnimplementedTypeDBClusterServer) UsersAll(context.Context, *ClusterUserManager_All_Req) (*ClusterUserManager_All_Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UsersAll not implemented")
}
func (*UnimplementedTypeDBClusterServer) UserPassword(context.Context, *ClusterUser_Password_Req) (*ClusterUser_Password_Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserPassword not implemented")
}
func (*UnimplementedTypeDBClusterServer) UserToken(context.Context, *ClusterUser_Token_Req) (*ClusterUser_Token_Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserToken not implemented")
}
func (*UnimplementedTypeDBClusterServer) UserDelete(context.Context, *ClusterUser_Delete_Req) (*ClusterUser_Delete_Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDelete not implemented")
}
func (*UnimplementedTypeDBClusterServer) DatabasesGet(context.Context, *ClusterDatabaseManager_Get_Req) (*ClusterDatabaseManager_Get_Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DatabasesGet not implemented")
}
func (*UnimplementedTypeDBClusterServer) DatabasesAll(context.Context, *ClusterDatabaseManager_All_Req) (*ClusterDatabaseManager_All_Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DatabasesAll not implemented")
}

func RegisterTypeDBClusterServer(s *grpc.Server, srv TypeDBClusterServer) {
	s.RegisterService(&_TypeDBCluster_serviceDesc, srv)
}

func _TypeDBCluster_ServersAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerManager_All_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypeDBClusterServer).ServersAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/typedb.protocol.TypeDBCluster/ServersAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypeDBClusterServer).ServersAll(ctx, req.(*ServerManager_All_Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _TypeDBCluster_UsersContains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterUserManager_Contains_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypeDBClusterServer).UsersContains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/typedb.protocol.TypeDBCluster/UsersContains",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypeDBClusterServer).UsersContains(ctx, req.(*ClusterUserManager_Contains_Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _TypeDBCluster_UsersCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterUserManager_Create_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypeDBClusterServer).UsersCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/typedb.protocol.TypeDBCluster/UsersCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypeDBClusterServer).UsersCreate(ctx, req.(*ClusterUserManager_Create_Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _TypeDBCluster_UsersAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterUserManager_All_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypeDBClusterServer).UsersAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/typedb.protocol.TypeDBCluster/UsersAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypeDBClusterServer).UsersAll(ctx, req.(*ClusterUserManager_All_Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _TypeDBCluster_UserPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterUser_Password_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypeDBClusterServer).UserPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/typedb.protocol.TypeDBCluster/UserPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypeDBClusterServer).UserPassword(ctx, req.(*ClusterUser_Password_Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _TypeDBCluster_UserToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterUser_Token_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypeDBClusterServer).UserToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/typedb.protocol.TypeDBCluster/UserToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypeDBClusterServer).UserToken(ctx, req.(*ClusterUser_Token_Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _TypeDBCluster_UserDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterUser_Delete_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypeDBClusterServer).UserDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/typedb.protocol.TypeDBCluster/UserDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypeDBClusterServer).UserDelete(ctx, req.(*ClusterUser_Delete_Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _TypeDBCluster_DatabasesGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterDatabaseManager_Get_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypeDBClusterServer).DatabasesGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/typedb.protocol.TypeDBCluster/DatabasesGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypeDBClusterServer).DatabasesGet(ctx, req.(*ClusterDatabaseManager_Get_Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _TypeDBCluster_DatabasesAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterDatabaseManager_All_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypeDBClusterServer).DatabasesAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/typedb.protocol.TypeDBCluster/DatabasesAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypeDBClusterServer).DatabasesAll(ctx, req.(*ClusterDatabaseManager_All_Req))
	}
	return interceptor(ctx, in, info, handler)
}

var _TypeDBCluster_serviceDesc = grpc.ServiceDesc{
	ServiceName: "typedb.protocol.TypeDBCluster",
	HandlerType: (*TypeDBClusterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "servers_all",
			Handler:    _TypeDBCluster_ServersAll_Handler,
		},
		{
			MethodName: "users_contains",
			Handler:    _TypeDBCluster_UsersContains_Handler,
		},
		{
			MethodName: "users_create",
			Handler:    _TypeDBCluster_UsersCreate_Handler,
		},
		{
			MethodName: "users_all",
			Handler:    _TypeDBCluster_UsersAll_Handler,
		},
		{
			MethodName: "user_password",
			Handler:    _TypeDBCluster_UserPassword_Handler,
		},
		{
			MethodName: "user_token",
			Handler:    _TypeDBCluster_UserToken_Handler,
		},
		{
			MethodName: "user_delete",
			Handler:    _TypeDBCluster_UserDelete_Handler,
		},
		{
			MethodName: "databases_get",
			Handler:    _TypeDBCluster_DatabasesGet_Handler,
		},
		{
			MethodName: "databases_all",
			Handler:    _TypeDBCluster_DatabasesAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/cluster/cluster_service.proto",
}
